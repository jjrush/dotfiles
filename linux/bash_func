#!/bin/bash

cursor_run() {
    local path="$1"
    if [[ "$path" == "." ]]; then
        path="$(pwd)"
    fi
    { output=$(~/bin/cursor "$path") & } > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo "Cursor starting..."
    else
        echo "Cursor failed to start"
    fi
}

# prepend
add_to_path_front() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
    fi
}

# append
add_to_path_back() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$PATH:$1"
    fi
}

# add zeek plugins to path
add_icsnpp_plugins() {
    local base_dir="$HOME/work-parsers"
    if [ ! -d "$base_dir" ]; then
        echo "Warning: $base_dir directory not found"
        return 1
    fi

    # Loop through each directory in /work-parsers
    for dir in "$base_dir"/*/; do
        if [ -d "$dir" ]; then
            # Check if it's Spicy ICSNPP plugin by looking for analyzer and scripts directories
            if [ -d "${dir}analyzer" ] && [ -d "${dir}scripts" ]; then
                # Remove trailing slash
                dir=${dir%/}
                # Only add if not already in path
                if [[ ":$ZEEK_PLUGIN_PATH:" != *":$dir:"* ]]; then
                    export ZEEK_PLUGIN_PATH="${dir}:$ZEEK_PLUGIN_PATH"
                    echo "Added ICSNPP plugin: $dir"
                else
                    echo "Plugin already in path: $dir"
                fi
            fi

            # Check if it's a BinPAC ICSNPP plugin by looking for for a src directory, scripts directory, and configure script
            if [ -d "${dir}src" ] && [ -d "${dir}scripts" ] && [ -f "${dir}configure" ]; then
                # Remove trailing slash
                dir=${dir%/}
                # Only add if not already in path
                if [[ ":$ZEEK_PLUGIN_PATH:" != *":$dir:"* ]]; then
                    export ZEEK_PLUGIN_PATH="${dir}:$ZEEK_PLUGIN_PATH"
                    echo "Added BinPAC ICSNPP plugin: $dir"
                else
                    echo "Plugin already in path: $dir"
                fi
            fi
        fi
    done
}

copy_dotfiles() {
    local target_dir="$1"
    local source_dir="$HOME"
    local files=(".bashrc" ".bash_aliases" ".bash_func" ".docker_aliases")
    
    # Check if target directory is provided
    if [[ -z "$target_dir" ]]; then
        echo "Error: Please provide a target directory"
        echo "Usage: copy_dotfiles <target_directory>"
        return 1
    fi
    
    # Create target directory if it doesn't exist
    if [[ ! -d "$target_dir" ]]; then
        echo "Creating target directory: $target_dir"
        mkdir -p "$target_dir" || {
            echo "Error: Failed to create target directory"
            return 1
        }
    fi
    
    # Copy each file if it exists
    for file in "${files[@]}"; do
        if [[ -f "$source_dir/$file" ]]; then
            echo "Copying $file to $target_dir"
            cp "$source_dir/$file" "$target_dir/" || {
                echo "Error: Failed to copy $file"
                return 1
            }
        else
            echo "Warning: $source_dir/$file not found, skipping"
        fi
    done
    
    echo "Dotfiles copy completed successfully!"
}